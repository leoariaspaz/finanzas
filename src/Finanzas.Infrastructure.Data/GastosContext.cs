// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Finanzas.Infrastructure.Data
{
    public partial class GastosContext : DbContext
    {
        public GastosContext()
        {
        }

        public GastosContext(DbContextOptions<GastosContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Asociaciones> Asociaciones { get; set; }
        public virtual DbSet<Cuentas> Cuentas { get; set; }
        public virtual DbSet<Movimientos> Movimientos { get; set; }
        public virtual DbSet<Rubros> Rubros { get; set; }
        public virtual DbSet<Transacciones> Transacciones { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Modern_Spanish_CI_AS");

            modelBuilder.Entity<Asociaciones>(entity =>
            {
                entity.HasKey(e => e.IdAsociacion)
                    .HasName("PK_Asociados");

                entity.Property(e => e.IdAsociacion).ValueGeneratedNever();

                entity.Property(e => e.Desde).HasColumnType("smalldatetime");

                entity.Property(e => e.Hasta).HasColumnType("smalldatetime");

                entity.HasOne(d => d.IdAsociadoNavigation)
                    .WithMany(p => p.AsociacionesIdAsociadoNavigation)
                    .HasForeignKey(d => d.IdAsociado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Asociados_UsuariosAsociados");

                entity.HasOne(d => d.IdOriginanteNavigation)
                    .WithMany(p => p.AsociacionesIdOriginanteNavigation)
                    .HasForeignKey(d => d.IdOriginante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Asociados_UsuariosOriginantes");
            });

            modelBuilder.Entity<Cuentas>(entity =>
            {
                entity.HasIndex(e => e.Descripcion, "IX_Cuentas")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoInicial).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Movimientos>(entity =>
            {
                entity.HasIndex(e => e.IdUsuario, "IX_FK_Movimientos_Usuarios");

                entity.HasIndex(e => e.Id, "IX_Movimientos");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Detalle)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaMovimiento).HasColumnType("smalldatetime");

                entity.Property(e => e.Importe).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdCuentaNavigation)
                    .WithMany(p => p.Movimientos)
                    .HasForeignKey(d => d.IdCuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Movimientos_Cuentas");

                entity.HasOne(d => d.IdTransaccionNavigation)
                    .WithMany(p => p.Movimientos)
                    .HasForeignKey(d => d.IdTransaccion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Movimientos_Transacciones");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany(p => p.Movimientos)
                    .HasForeignKey(d => d.IdUsuario)
                    .HasConstraintName("FK_Movimientos_Usuarios");
            });

            modelBuilder.Entity<Rubros>(entity =>
            {
                entity.HasIndex(e => e.Descripcion, "IX_Rubros")
                    .IsUnique();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Transacciones>(entity =>
            {
                entity.HasIndex(e => new { e.Descripcion, e.IdRubro }, "IX_Transacciones")
                    .IsUnique();

                entity.Property(e => e.Descripcion)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdRubroNavigation)
                    .WithMany(p => p.Transacciones)
                    .HasForeignKey(d => d.IdRubro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transacciones_Rubros");
            });

            modelBuilder.Entity<Usuarios>(entity =>
            {
                entity.HasIndex(e => e.Id, "IX_Usuarios_Id");

                entity.HasIndex(e => e.Nombre, "IX_Usuarios_Nombre")
                    .IsUnique();

                entity.HasIndex(e => e.NombreCompleto, "IX_Usuarios_NombreCompleto")
                    .IsUnique();

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Contraseña)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAlta)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaBaja).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompleto)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PathAvatar)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}